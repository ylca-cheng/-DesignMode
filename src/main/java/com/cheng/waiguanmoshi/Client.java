package com.cheng.waiguanmoshi;

/**
 * Created by niecheng on 2018/11/28.
 * <p>
 * 外观模式是一种使用频率非常高的结构型设计模式，
 * 它通过引入一个外观角色来简化客户端与子系统之间的交互，
 * 为复杂的子系统调用提供一个统一的入口，
 * 降低子系统与客户端的耦合度，且客户端调用非常方便。
 * <p>
 * 举例说明：
 * 不知道大家有没有比较过自己泡茶和去茶馆喝茶的区别，如果是自己泡茶需要自行准备茶叶、茶具和开水，
 * 而去茶馆喝茶，最简单的方式就是跟茶馆服务员说想要一杯什么样的茶，是铁观音、碧螺春还是西湖龙井？
 * 正因为茶馆有服务员，顾客无须直接和茶叶、茶具、开水等交互，整个泡茶过程由服务员来完成，
 * 顾客只需与服务员交互即可，整个过程非常简单省事
 * <p>
 * 外观模式中，一个子系统的外部与其内部的通信通过一个统一的外观类进行，外观类将客户类与子系统的内部复杂性分隔开，
 * 使得客户类只需要与外观角色打交道，而不需要与子系统内部的很多对象打交道。
 * <p>
 * 在本例中职业经理就充当着服务员的角色,客户不需要在意细节，只用和职业经理打交道就行
 */
public class Client {
    public static void main(String[] args) {

        StockManager sm = new StockManager();

        // 买入
        sm.buyStock();

        // 卖出
        sm.sellStock();
    }
}
